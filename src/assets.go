// Code generated by go-bindata.
// sources:
// static/css/style.css
// static/index.html
// static/js/actions.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcd\x8e\xd3\x30\x10\xc7\xcf\xf1\x53\x8c\x5a\x21\x41\xb5\xe9\x76\x29\x14\xc9\x39\x72\x60\x0f\x88\x03\xfb\x04\x53\x7b\x92\x0c\xeb\xd8\x91\x3d\x2e\x2d\x55\xdf\x1d\xa5\xd9\x0d\xb4\x3d\x41\x6e\xf9\x79\xec\xff\xc7\x6c\x83\x3d\x80\x3a\xaa\xa2\xc3\xd8\xb0\xd7\xb0\xaa\x54\xd1\xa3\xb5\xec\x9b\xf1\xa7\x0e\x5e\xca\x1a\x3b\x76\x07\x0d\xb3\xaf\xd9\xb0\x45\xf8\x12\xd1\x5b\x9a\xdd\x4d\xe0\x09\x7d\x9a\xdd\x41\x42\x9f\xca\x44\x91\xeb\xd7\x9b\x89\x7f\x91\x86\x87\xd5\xea\x4d\xa5\x8a\x2d\x9a\xe7\x26\x86\xec\xad\x86\xf9\x7a\xbd\xbe\x40\x25\x77\xd8\x90\xce\xd1\xbd\xed\x51\x84\xa2\x5f\xfe\xe8\x9b\x77\x95\x3a\x29\xa5\xee\x17\xf0\x48\x68\x29\xaa\xf2\x9f\x3f\x58\xdc\x2b\x35\x8f\x94\xb2\x93\x21\xea\x4f\xb6\xd2\x6a\xf8\xb0\x59\xf5\xfb\xea\xaf\xe4\x80\x59\xc2\xa5\xef\xe5\xa7\x8f\xd4\xdd\x94\xf0\x48\x6e\x47\xc2\x06\xe1\x1b\xe5\xa1\x85\x09\x5c\x36\x70\x9a\x64\x21\x3b\x75\x54\x00\x00\x8e\x93\x94\x49\x0e\x8e\x34\xf8\xe0\xe9\x6a\x0a\x1c\x03\x0e\x26\x2d\xa7\xde\xe1\x41\xc3\xd6\x05\xf3\x5c\xa9\xc2\x04\x17\xa2\x86\x79\x5d\xd7\xf5\x66\x53\xa9\x42\x68\x2f\xa5\x25\x13\x22\x0a\x07\xff\xfa\xdc\xc8\x25\xa2\x4f\x75\x88\x9d\x86\xdc\xf7\x14\x0d\x26\x9a\xb2\x96\x91\x9b\x56\x34\xbc\x3f\x17\x70\xab\xaf\xdb\xb0\xa3\x38\xb8\xb8\xd1\xc8\xde\x52\x74\x7c\x16\xfa\xe3\xc8\x98\xc1\xd1\xcb\x9e\x9e\xc8\xd5\xe5\x67\x47\x18\x3d\xfb\x06\xbe\x67\x47\x09\xfe\x77\x6d\xd9\xcd\x3d\xee\xb8\x19\xe5\xb1\x16\x8a\xf0\xd2\xa4\x09\x5e\xc8\x8b\x86\xd9\x72\x56\x9d\xc9\x75\x67\x03\xdb\x71\xe2\x2d\x3b\x96\x83\x86\x96\xad\x25\x3f\x72\x33\x18\xd4\xb0\x0d\xd2\x8e\xa0\xa5\xb1\x94\xd5\x39\xc8\x02\x5a\xe9\x1c\x5c\xc8\x43\x71\x9c\xa6\x1e\xfa\x7d\x05\x27\x75\x75\x5e\x14\x47\xe8\xd8\x97\x57\x53\xbf\x03\x00\x00\xff\xff\x68\x04\x16\x88\x65\x03\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 869, mode: os.FileMode(420), modTime: time.Unix(1523041664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xc1\x6e\xd4\x40\x0c\x86\xcf\x9b\xa7\x30\x3e\xb5\x87\xc4\x54\xbd\x20\xc8\xe4\x40\xb6\x12\x95\x0a\x54\x34\x08\x38\xa6\x13\xb7\xc9\x6e\x76\x26\x8c\xbd\xbb\xcd\xdb\xa3\x99\x64\x25\x6e\x8e\xff\x7c\x9f\x6d\x4d\xf9\x6e\xfb\xbd\x6e\xfe\x3c\xde\x41\xaf\x87\x11\x1e\x7f\x7e\x7e\xb8\xaf\x01\x73\xa2\x5f\xb7\x35\xd1\xb6\xd9\xc2\xef\x2f\xcd\xd7\x07\xb8\x29\xde\xc3\x93\x86\xc1\x2a\xd1\xdd\x37\x84\x0c\x7b\xd5\xe9\x23\xd1\xf9\x7c\x2e\xce\xb7\x85\x0f\xaf\xd4\xfc\xa0\xb7\xa8\xb9\x89\xdc\x5a\xe6\x92\xa0\xa2\xd3\x0e\xab\xac\x8c\xbd\x2a\xdb\x94\x3d\xb7\x5d\x95\x6d\x36\xe5\x81\xb5\x85\xa8\xca\xf9\xef\x71\x38\x19\xac\xbd\x53\x76\x9a\x37\xf3\xc4\x08\x76\xf9\x32\xa8\xfc\xa6\x14\xe9\x4f\x60\xfb\x36\x08\xab\x39\xea\x4b\xfe\x01\x81\x92\x67\x1c\xdc\x1e\x02\x8f\x06\x45\xe7\x91\xa5\x67\x56\x04\x9d\x27\x5e\x59\x2b\x82\xd0\x07\x7e\x31\x68\x45\x28\xfd\x55\xa4\xe6\x22\x10\x1b\x86\x49\xff\x27\x76\xed\xa9\x5d\xba\x08\x12\xac\xc1\x9d\x50\x6b\x75\xf0\x4e\x8a\x9d\x60\x55\xd2\x92\xc6\x7b\x68\x3d\xa8\x7c\xf6\xdd\x5c\x65\x1b\x00\x80\x72\x70\xd3\x71\x35\x46\x21\xb8\xf6\xc0\x66\xcf\x33\x78\x97\x22\x83\xde\xdd\xc7\xa2\xee\x5b\xf7\xca\x57\xda\x0f\x72\x8d\xe0\xdd\x9e\xe7\x29\xb0\x88\xc1\x70\x74\x4f\x69\xc8\x15\x9f\xd8\xe9\x75\x9c\x9a\xd8\xcb\x8c\xe7\x70\xa9\x84\x47\xb6\x0a\x43\x67\xd0\xf9\x8e\x05\x2f\x01\x2d\x49\x5a\x73\x59\xaf\xa4\xe5\x1d\xfe\x05\x00\x00\xff\xff\x45\x0c\x21\x69\xfe\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 510, mode: os.FileMode(420), modTime: time.Unix(1523041643, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsActionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x41\x6b\x02\x31\x10\x05\xe0\xf3\xe6\x57\x0c\x7b\x31\x7b\x09\x94\x1e\x65\x2f\x95\x42\x05\x7b\x6a\xff\x40\x48\x9e\x1a\x4c\x67\x24\x3b\xd1\x4a\xf1\xbf\x97\x5d\x95\xc2\x42\x6f\x0f\x1e\xef\x9b\x31\xdb\xca\x41\x93\x30\x95\xca\x1f\xa1\xa4\xa3\x5a\x74\xf4\x63\x88\x88\xd2\x96\x2c\xdc\x01\x97\x95\x44\x50\xdf\xd3\xd3\xf3\x58\x35\x0d\xbe\x15\x85\x7d\x76\x89\x4f\x72\x80\x5d\x84\x2c\x03\x16\xdd\xb4\xba\x9a\xab\xf9\x63\x85\xd7\x7c\xac\xba\xda\x7b\xde\xc1\xa6\x31\x3f\x78\x96\x88\xc1\x0d\xf0\x25\xec\x6f\x8d\x3b\xf9\x5c\xd1\x2d\x4d\x13\x25\xd4\x2f\xb0\xba\x1d\xf4\x35\x63\x8c\x2f\x97\x75\xb4\xed\x34\x6a\x3b\x97\x98\x51\xde\x3e\xdf\x37\xd4\xdf\xa1\xe8\xd5\xdf\x80\xe5\xec\x83\x8d\xf8\x68\x1f\x57\xff\x95\x15\x83\xce\xe0\x36\x71\xd2\x76\xe2\xce\x89\xa3\x9c\x9d\x70\x16\x1f\xa9\xbf\xab\xe6\x37\x00\x00\xff\xff\xb6\x92\x27\xc9\x40\x01\x00\x00")

func jsActionsJsBytes() ([]byte, error) {
	return bindataRead(
		_jsActionsJs,
		"js/actions.js",
	)
}

func jsActionsJs() (*asset, error) {
	bytes, err := jsActionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/actions.js", size: 320, mode: os.FileMode(420), modTime: time.Unix(1523040256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"index.html": indexHtml,
	"js/actions.js": jsActionsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"actions.js": &bintree{jsActionsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

