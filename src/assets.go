// Code generated by go-bindata.
// sources:
// static/css/style.css
// static/index.html
// static/js/actions.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xd9\xa7\x58\x81\x7e\xe9\x2f\x22\x10\x94\x53\x9d\x5b\x2b\xd4\x4b\x4f\xb4\x2f\xb0\x64\x4d\xba\xad\xb1\x2d\xdb\x29\xa4\x88\x77\xaf\x42\x05\x22\xa5\xbe\xed\xe8\xdb\x99\xf1\xae\x1d\x77\x70\x80\x6c\x4b\xa1\x11\xab\xb0\xa8\x20\xf3\xc4\x2c\xb6\xf9\x19\x36\xce\xa6\x7c\x43\x5b\x31\x9d\xc2\xd1\x73\x5b\x0b\x13\x3e\x05\xb2\xac\x47\xd3\x8b\xf0\x42\x36\x8e\xa6\x18\xc9\xc6\x3c\xea\x20\x9b\xf3\x66\x94\x2f\xad\x70\x51\x14\xff\x2a\xc8\xd6\x54\x7f\x34\xc1\xb5\x96\x15\x8e\xcb\xb2\x1c\x48\xb9\x6c\xa9\xd1\xaa\x0d\xe6\xbf\xa7\x94\x74\xb0\xb3\x77\xdf\xdc\x55\x70\x04\xb1\xbe\x4d\x78\x00\x44\xc4\x9d\x70\x7a\x3b\x3b\x1e\x01\xe6\x13\x5c\xe9\xd8\x9a\x84\xaf\xb4\x36\x1a\x27\x73\x98\xb1\x7c\x9e\x86\x03\x64\x2c\xd1\x1b\xea\x14\xa6\x5e\xa8\x20\xfb\xb5\x7f\x61\x57\x6e\x87\x37\x7c\x1e\xdc\x6e\x40\x3d\x6a\x63\x7a\xec\xaa\x76\xed\x8c\x0b\x0a\xc7\xcb\xe5\xb2\xff\x8f\x0b\xac\x83\xc2\x85\xdf\x63\x74\x46\x18\xc7\xf7\xa7\x57\xdd\x78\xd7\xda\x98\xeb\x6b\x97\x7e\x8f\x8b\xc2\xef\x07\x81\x0f\x8e\xbb\xbf\x7b\xe5\x7d\xbe\xef\xe1\xef\x00\x00\x00\xff\xff\x04\x65\xab\x1c\xc4\x01\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 452, mode: os.FileMode(420), modTime: time.Unix(1523044317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6f\xdb\x30\x0c\x85\xef\xf9\x15\x1c\x4f\xed\xc1\xe6\x8a\x5e\x86\xcd\xca\xa1\x4e\x81\x15\xe8\xb6\x62\xf5\xb0\xed\xa8\x48\x6c\xad\xc4\x91\x3c\x89\x71\xea\x7f\x3f\xc8\x0e\x10\x63\xc0\x6e\x7c\xa4\xde\xf7\xf0\xa0\xea\xdd\xe6\x5b\xdd\xfc\x7e\xba\x87\x56\x0e\x1d\x3c\xfd\xb8\x7b\x7c\xa8\x01\x0b\xa2\x9f\xb7\x35\xd1\xa6\xd9\xc0\xaf\xcf\xcd\x97\x47\xb8\x29\xdf\xc3\xb3\x44\x67\x84\xe8\xfe\x2b\xc2\x0a\x5b\x91\xfe\x23\xd1\xe9\x74\x2a\x4f\xb7\x65\x88\xaf\xd4\x7c\xa7\xb7\x8c\xb9\xc9\xbe\xf3\x58\xa4\xc9\x54\x5a\xb1\xb8\x5e\x55\x79\xb7\x5e\x01\x00\x54\x2d\x6b\x3b\x8f\x93\x3c\xb0\x68\xc8\xcc\x82\xff\x1c\xdd\xa0\xb0\x0e\x5e\xd8\x4b\xd1\x8c\x3d\x23\x98\x59\x29\x14\x7e\x13\xca\x98\x4f\x60\x5a\x1d\x13\x8b\x3a\xca\x4b\xf1\x01\x81\x16\xb4\xce\xf9\x3d\x44\xee\x14\x26\x19\x3b\x4e\x2d\xb3\x20\xc8\xd8\xf3\x99\x60\x52\x42\x68\x23\xbf\x28\x34\x29\xd1\xf4\xaa\x9c\x96\x4b\x4c\x32\xd1\xf5\xb2\xf4\xed\xf4\xa0\xe7\x2d\x42\x8a\x46\xe1\x2e\x91\x36\xe2\x82\x4f\xe5\x2e\xe1\xba\xa2\xf9\x7a\x2e\x49\x97\x96\xd5\x36\xd8\x71\xc1\x76\xbe\x3f\x9e\xd1\x99\x0c\x5e\x1f\x58\xed\x79\x84\xe0\xa7\x93\xc2\xe0\x1f\xf2\x50\xb7\xda\xbf\xf2\x95\xb4\x2e\x5d\x23\x04\xbf\xe7\xb1\x8f\x9c\x92\xc2\x78\xf4\xcf\x53\xda\x15\x0f\xec\xe5\x3a\xc7\x4f\xde\x45\xcc\x36\x2e\x84\x75\x03\x98\x4e\x67\xaf\x75\x43\xa3\xb7\x1d\xe3\xe5\xfc\xbf\x27\x77\xc1\x8e\x08\xce\x2a\xf4\xc1\x72\xfa\xd7\x41\xd6\x0d\x8b\x8c\x8b\xac\x68\xae\x5c\xd1\xfc\xed\x7f\x03\x00\x00\xff\xff\x53\x6e\x62\xd9\x6d\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 621, mode: os.FileMode(420), modTime: time.Unix(1523044368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsActionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x41\x6b\x02\x31\x10\x05\xe0\xf3\xe6\x57\x0c\x7b\x31\x7b\x09\x94\x1e\x65\x2f\x95\x42\x05\x7b\x6a\xff\x40\x48\x9e\x1a\x4c\x67\x24\x3b\xd1\x4a\xf1\xbf\x97\x5d\x95\xc2\x42\x6f\x0f\x1e\xef\x9b\x31\xdb\xca\x41\x93\x30\x95\xca\x1f\xa1\xa4\xa3\x5a\x74\xf4\x63\x88\x88\xd2\x96\x2c\xdc\x01\x97\x95\x44\x50\xdf\xd3\xd3\xf3\x58\x35\x0d\xbe\x15\x85\x7d\x76\x89\x4f\x72\x80\x5d\x84\x2c\x03\x16\xdd\xb4\xba\x9a\xab\xf9\x63\x85\xd7\x7c\xac\xba\xda\x7b\xde\xc1\xa6\x31\x3f\x78\x96\x88\xc1\x0d\xf0\x25\xec\x6f\x8d\x3b\xf9\x5c\xd1\x2d\x4d\x13\x25\xd4\x2f\xb0\xba\x1d\xf4\x35\x63\x8c\x2f\x97\x75\xb4\xed\x34\x6a\x3b\x97\x98\x51\xde\x3e\xdf\x37\xd4\xdf\xa1\xe8\xd5\xdf\x80\xe5\xec\x83\x8d\xf8\x68\x1f\x57\xff\x95\x15\x83\xce\xe0\x36\x71\xd2\x76\xe2\xce\x89\xa3\x9c\x9d\x70\x16\x1f\xa9\xbf\xab\xe6\x37\x00\x00\xff\xff\xb6\x92\x27\xc9\x40\x01\x00\x00")

func jsActionsJsBytes() ([]byte, error) {
	return bindataRead(
		_jsActionsJs,
		"js/actions.js",
	)
}

func jsActionsJs() (*asset, error) {
	bytes, err := jsActionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/actions.js", size: 320, mode: os.FileMode(420), modTime: time.Unix(1523044369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"index.html": indexHtml,
	"js/actions.js": jsActionsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"actions.js": &bintree{jsActionsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

